apiVersion: v1
kind: ConfigMap
metadata:
  name: tenant-service-config
  namespace: mis
data:
  NODE_ENV: "production"
  PORT: "3006"
  LOG_LEVEL: "info"
  BASE_URL: "https://tenant-service.mis.local"
  CORS_ORIGIN: "https://app.mis.local,https://admin.mis.local"
  RATE_LIMIT_WINDOW_MS: "900000"
  RATE_LIMIT_MAX_REQUESTS: "1000"
---
apiVersion: v1
kind: Secret
metadata:
  name: tenant-service-secrets
  namespace: mis
type: Opaque
data:
  JWT_SECRET: eW91ci1zdXBlci1zZWNyZXQtand0LWtleS10ZW5hbnQtc2VydmljZQ==
  DATABASE_URL: cG9zdGdyZXNxbDovL3Bvc3RncmVzOnBhc3N3b3JkQHBvc3RncmVzOjU0MzIvbWlzX2Ri
  REDIS_URL: cmVkaXM6Ly9yZWRpczo2Mzc5
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tenant-service
  namespace: mis
  labels:
    app: tenant-service
    version: v1.0.0
spec:
  replicas: 3
  selector:
    matchLabels:
      app: tenant-service
  template:
    metadata:
      labels:
        app: tenant-service
        version: v1.0.0
    spec:
      containers:
      - name: tenant-service
        image: mis/tenant-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3006
          name: http
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: tenant-service-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: tenant-service-config
              key: PORT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: tenant-service-config
              key: LOG_LEVEL
        - name: BASE_URL
          valueFrom:
            configMapKeyRef:
              name: tenant-service-config
              key: BASE_URL
        - name: CORS_ORIGIN
          valueFrom:
            configMapKeyRef:
              name: tenant-service-config
              key: CORS_ORIGIN
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: tenant-service-secrets
              key: JWT_SECRET
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: tenant-service-secrets
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: tenant-service-secrets
              key: REDIS_URL
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3006
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3006
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: logs
        emptyDir: {}
      securityContext:
        fsGroup: 1001
---
apiVersion: v1
kind: Service
metadata:
  name: tenant-service
  namespace: mis
  labels:
    app: tenant-service
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 3006
    protocol: TCP
    name: http
  selector:
    app: tenant-service
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: tenant-service-ingress
  namespace: mis
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - tenant-service.mis.local
    secretName: tenant-service-tls
  rules:
  - host: tenant-service.mis.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: tenant-service
            port:
              number: 80
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: tenant-service-hpa
  namespace: mis
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: tenant-service
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: tenant-service-pdb
  namespace: mis
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: tenant-service 